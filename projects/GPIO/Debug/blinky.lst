
Debug/blinky.elf:     file format elf32-littlearm
Debug/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000265

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000002e8 memsz 0x000002e8 flags rwx
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x080002e8 align 2**16
         filesz 0x00000000 memsz 0x00000004 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000000  08000134  080002e8  000102e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  08000134  08000134  00010134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.main    00000028  0800013c  0800013c  0001013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text.init_led 00000078  08000164  08000164  00010164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.read_button 00000010  080001dc  080001dc  000101dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.led_toggle 00000038  080001ec  080001ec  000101ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.SysTick_Handler 0000001c  08000224  08000224  00010224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.delay_ms 00000020  08000240  08000240  00010240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.Default_Handler 00000002  08000260  08000260  00010260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.Reset_Handler 00000084  08000264  08000264  00010264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .rodata       00000000  080002e8  080002e8  000102e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         00000000  20000000  20000000  000102e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000000  20000000  080002e8  00000000  2**0
                  ALLOC
 15 .bss.delay_ticks 00000004  20000000  080002e8  00020000  2**2
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  000102e8  2**0
                  CONTENTS, READONLY
 17 .comment      00000049  00000000  00000000  00010316  2**0
                  CONTENTS, READONLY
 18 .debug_info   000005e9  00000000  00000000  0001035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000020e  00000000  00000000  00010948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000000b0  00000000  00000000  00010b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00000080  00000000  00000000  00010c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000060  00000000  00000000  00010c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   000003db  00000000  00000000  00010ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000003b9  00000000  00000000  000110c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  000000e4  00000000  00000000  0001147c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000134 l    d  .text	00000000 .text
08000134 l    d  .init	00000000 .init
08000138 l    d  .fini	00000000 .fini
0800013c l    d  .text.main	00000000 .text.main
08000164 l    d  .text.init_led	00000000 .text.init_led
080001dc l    d  .text.read_button	00000000 .text.read_button
080001ec l    d  .text.led_toggle	00000000 .text.led_toggle
08000224 l    d  .text.SysTick_Handler	00000000 .text.SysTick_Handler
08000240 l    d  .text.delay_ms	00000000 .text.delay_ms
08000260 l    d  .text.Default_Handler	00000000 .text.Default_Handler
08000264 l    d  .text.Reset_Handler	00000000 .text.Reset_Handler
080002e8 l    d  .rodata	00000000 .rodata
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
20000000 l    d  .bss.delay_ticks	00000000 .bss.delay_ticks
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 stm32_startup_f4.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 blinky.c
08000260  w    F .text.Default_Handler	00000002 RTC_Alarm_IRQHandler
08000260  w    F .text.Default_Handler	00000002 EXTI2_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM8_TRG_COM_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM8_CC_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DebugMon_Handler
080002e8 g       *ABS*	00000000 _la_data
08000260  w    F .text.Default_Handler	00000002 TIM1_CC_IRQHandler
08000260  w    F .text.Default_Handler	00000002 HardFault_Handler
08000224 g     F .text.SysTick_Handler	0000001c SysTick_Handler
08000260  w    F .text.Default_Handler	00000002 PVD_IRQHandler
08000260  w    F .text.Default_Handler	00000002 SDIO_IRQHandler
08000260  w    F .text.Default_Handler	00000002 PendSV_Handler
08000260  w    F .text.Default_Handler	00000002 NMI_Handler
08000260  w    F .text.Default_Handler	00000002 EXTI3_IRQHandler
08000134 g       .text	00000000 _etext
20000000 g       .bss	00000000 _sbss
08000164 g     F .text.init_led	00000078 init_led
08000260  w    F .text.Default_Handler	00000002 USB_HP_CAN_TX_IRQHandler
08000260  w    F .text.Default_Handler	00000002 EXTI0_IRQHandler
08000260  w    F .text.Default_Handler	00000002 I2C2_EV_IRQHandler
08000260  w    F .text.Default_Handler	00000002 UsageFault_Handler
08000260  w    F .text.Default_Handler	00000002 ADC1_2_IRQHandler
20000000 g       .data	00000000 _sdata
08000260  w    F .text.Default_Handler	00000002 SPI1_IRQHandler
08000260  w    F .text.Default_Handler	00000002 CAN_SCE_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TAMPER_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM6_DAC_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel0_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM8_UP_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DMA2_Channel2_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel4_IRQHandler
08000134 g     F .init	00000000 _init
08000260  w    F .text.Default_Handler	00000002 Flash_IRQHandler
08000260  w    F .text.Default_Handler	00000002 USART3_IRQHandler
08000260  w    F .text.Default_Handler	00000002 RTC_IRQHandler
20000000 g       .bss	00000000 _ebss
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel7_IRQHandler
08000264 g     F .text.Reset_Handler	00000084 Reset_Handler
08000260  w    F .text.Default_Handler	00000002 UART5_IRQHandler
08000260  w    F .text.Default_Handler	00000002 ADC3_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM4_IRQHandler
08000260  w    F .text.Default_Handler	00000002 CAN_RX1_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DMA2_Channel1_IRQHandler
08000260  w    F .text.Default_Handler	00000002 I2C1_EV_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel6_IRQHandler
08000260  w    F .text.Default_Handler	00000002 UART4_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM3_IRQHandler
08000260  w    F .text.Default_Handler	00000002 RCC_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM1_TRG_COM_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel1_IRQHandler
08000260 g     F .text.Default_Handler	00000002 Default_Handler
08000260  w    F .text.Default_Handler	00000002 EXTI15_10_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM7_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM5_IRQHandler
08000260  w    F .text.Default_Handler	00000002 EXTI9_5_IRQHandler
080001dc g     F .text.read_button	00000010 read_button
08000260  w    F .text.Default_Handler	00000002 SPI2_IRQHandler
08000260  w    F .text.Default_Handler	00000002 USB_LP_CAN_RX0_IRQHandler
08000260  w    F .text.Default_Handler	00000002 MemManage_Handler
0800013c g     F .text.main	00000028 main
08000240 g     F .text.delay_ms	00000020 delay_ms
08000260  w    F .text.Default_Handler	00000002 SVC_Handler
20000000 g     O .bss.delay_ticks	00000004 delay_ticks
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel5_IRQHandler
08000260  w    F .text.Default_Handler	00000002 EXTI4_IRQHandler
080001ec g     F .text.led_toggle	00000038 led_toggle
08000138 g     F .fini	00000000 _fini
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel3_IRQHandler
08000260  w    F .text.Default_Handler	00000002 FSMC_IRQHandler
08000134 g       .isr_vector	00000000 _eisr_vector
08000260  w    F .text.Default_Handler	00000002 TIM1_UP_IRQHandler
08000260  w    F .text.Default_Handler	00000002 WWDG_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM2_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM1_BRK_IRQHandler
08000260  w    F .text.Default_Handler	00000002 EXTI1_IRQHandler
20000000 g       .data	00000000 _edata
08000260  w    F .text.Default_Handler	00000002 DMA2_Channel4_5_IRQHandler
08000260  w    F .text.Default_Handler	00000002 USART2_IRQHandler
08000260  w    F .text.Default_Handler	00000002 I2C2_ER_IRQHandler
08000260  w    F .text.Default_Handler	00000002 DMA1_Channel2_IRQHandler
08000260  w    F .text.Default_Handler	00000002 TIM8_BRK_IRQHandler
08000000 g     O .isr_vector	00000134 vectors
08000260  w    F .text.Default_Handler	00000002 BusFault_Handler
08000260  w    F .text.Default_Handler	00000002 USART1_IRQHandler
08000260  w    F .text.Default_Handler	00000002 SPI3_IRQHandler
08000260  w    F .text.Default_Handler	00000002 I2C1_ER_IRQHandler
08000260  w    F .text.Default_Handler	00000002 USB_WKUP_IRQHandler
080002e8 g       .rodata	00000000 _erodata
08000260  w    F .text.Default_Handler	00000002 DMA2_Channel3_IRQHandler



Disassembly of section .init:

08000134 <_init>:
 8000134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000136:	bf00      	nop

Disassembly of section .fini:

08000138 <_fini>:
 8000138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800013a:	bf00      	nop

Disassembly of section .text.main:

0800013c <main>:
volatile uint32_t delay_ticks;
/*************************************************
* main code starts from here
*************************************************/
int main(void)
{
 800013c:	b508      	push	{r3, lr}
    // Initialize GPIO
    init_led();
 800013e:	f000 f811 	bl	8000164 <init_led>
    //init_button();
    // the code should never leave its master loop, hence while(1) or for(;;)
    while(1)
    {
        // Set delay based on button state
        if(!read_button()) {
 8000142:	f000 f84b 	bl	80001dc <read_button>
 8000146:	4603      	mov	r3, r0
 8000148:	2b00      	cmp	r3, #0
 800014a:	d104      	bne.n	8000156 <main+0x1a>
            delay_ms(1000);  // Delay when the button is released
 800014c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000150:	f000 f876 	bl	8000240 <delay_ms>
 8000154:	e003      	b.n	800015e <main+0x22>
        } else {
            delay_ms(500);   // Delay when the button is pressed
 8000156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800015a:	f000 f871 	bl	8000240 <delay_ms>
        }
        // Toggle LED pins
        led_toggle();
 800015e:	f000 f845 	bl	80001ec <led_toggle>
        if(!read_button()) {
 8000162:	e7ee      	b.n	8000142 <main+0x6>

Disassembly of section .text.init_led:

08000164 <init_led>:
     * More info in Chapter 7 - RCC in RM0090
     */

    /* Enable GPIOD clock (AHB1ENR: bit 3) */
    // AHB1ENR: XXXX XXXX XXXX XXXX XXXX XXXX XXXX 1XXX
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;//GPIODEN;
 8000164:	4b1b      	ldr	r3, [pc, #108]	; (80001d4 <init_led+0x70>)
 8000166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000168:	4a1a      	ldr	r2, [pc, #104]	; (80001d4 <init_led+0x70>)
 800016a:	f043 0308 	orr.w	r3, r3, #8
 800016e:	6313      	str	r3, [r2, #48]	; 0x30
    // In order to make a pin output, we need to write 01 to the relevant
    // section in MODER register
    //                     bit31                                         bit0
    // MODER register bits : xx xx xx 01 XX XX XX XX XX XX XX XX XX XX XX XX
    //                      p15      p12                                  p0
	GPIOD->MODER |= (1U<<24);
 8000170:	4b19      	ldr	r3, [pc, #100]	; (80001d8 <init_led+0x74>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a18      	ldr	r2, [pc, #96]	; (80001d8 <init_led+0x74>)
 8000176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800017a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<25);
 800017c:	4b16      	ldr	r3, [pc, #88]	; (80001d8 <init_led+0x74>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <init_led+0x74>)
 8000182:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000186:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<26);
 8000188:	4b13      	ldr	r3, [pc, #76]	; (80001d8 <init_led+0x74>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a12      	ldr	r2, [pc, #72]	; (80001d8 <init_led+0x74>)
 800018e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000192:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<27);
 8000194:	4b10      	ldr	r3, [pc, #64]	; (80001d8 <init_led+0x74>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <init_led+0x74>)
 800019a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800019e:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (1U<<28);
 80001a0:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <init_led+0x74>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a0c      	ldr	r2, [pc, #48]	; (80001d8 <init_led+0x74>)
 80001a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001aa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<29);
 80001ac:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <init_led+0x74>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <init_led+0x74>)
 80001b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80001b6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<30);
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <init_led+0x74>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <init_led+0x74>)
 80001be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001c2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<31);
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <init_led+0x74>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <init_led+0x74>)
 80001ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80001ce:	6013      	str	r3, [r2, #0]
}
 80001d0:	bf00      	nop
 80001d2:	4770      	bx	lr
 80001d4:	40023800 	.word	0x40023800
 80001d8:	40020c00 	.word	0x40020c00

Disassembly of section .text.read_button:

080001dc <read_button>:
	GPIOA->MODER &= ~(1U<<31);
}

unsigned int read_button(void)
{
    return (GPIOA->IDR & (1 << BUTTON));
 80001dc:	4b02      	ldr	r3, [pc, #8]	; (80001e8 <read_button+0xc>)
 80001de:	691b      	ldr	r3, [r3, #16]
 80001e0:	f003 0301 	and.w	r3, r3, #1
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	4770      	bx	lr
 80001e8:	40020000 	.word	0x40020000

Disassembly of section .text.led_toggle:

080001ec <led_toggle>:

void led_toggle(void)
{
	GPIOD->ODR ^= (1 << LED_PIN_1);
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <led_toggle+0x34>)
 80001ee:	695b      	ldr	r3, [r3, #20]
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <led_toggle+0x34>)
 80001f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80001f6:	6153      	str	r3, [r2, #20]
    GPIOD->ODR ^= (1 << LED_PIN_2);
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <led_toggle+0x34>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <led_toggle+0x34>)
 80001fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000202:	6153      	str	r3, [r2, #20]
    GPIOD->ODR ^= (1 << LED_PIN_3);
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <led_toggle+0x34>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a05      	ldr	r2, [pc, #20]	; (8000220 <led_toggle+0x34>)
 800020a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800020e:	6153      	str	r3, [r2, #20]
    GPIOD->ODR ^= (1 << LED_PIN_4);
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <led_toggle+0x34>)
 8000212:	695b      	ldr	r3, [r3, #20]
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <led_toggle+0x34>)
 8000216:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800021a:	6153      	str	r3, [r2, #20]
}
 800021c:	bf00      	nop
 800021e:	4770      	bx	lr
 8000220:	40020c00 	.word	0x40020c00

Disassembly of section .text.SysTick_Handler:

08000224 <SysTick_Handler>:
        __asm__("nop");
    }
}

void SysTick_Handler(void) {
    if (delay_ticks > 0) {
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <SysTick_Handler+0x18>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d004      	beq.n	8000236 <SysTick_Handler+0x12>
        delay_ticks--;
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <SysTick_Handler+0x18>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	3b01      	subs	r3, #1
 8000232:	4a02      	ldr	r2, [pc, #8]	; (800023c <SysTick_Handler+0x18>)
 8000234:	6013      	str	r3, [r2, #0]
    }
}
 8000236:	bf00      	nop
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000000 	.word	0x20000000

Disassembly of section .text.delay_ms:

08000240 <delay_ms>:

void delay_ms(uint32_t milliseconds) {
 8000240:	b082      	sub	sp, #8
 8000242:	9001      	str	r0, [sp, #4]
    delay_ticks = milliseconds;
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <delay_ms+0x1c>)
 8000246:	9b01      	ldr	r3, [sp, #4]
 8000248:	6013      	str	r3, [r2, #0]
    while (delay_ticks > 0);
 800024a:	bf00      	nop
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <delay_ms+0x1c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d1fb      	bne.n	800024c <delay_ms+0xc>
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	b002      	add	sp, #8
 800025a:	4770      	bx	lr
 800025c:	20000000 	.word	0x20000000

Disassembly of section .text.Default_Handler:

08000260 <Default_Handler>:
 * It enters an infinite loop, effectively locking up the processor.
 * You can customize this function to handle specific exceptions if needed.
 */
void Default_Handler(void)
{
	while(1);	// Infinite loop, locking up the processor
 8000260:	e7fe      	b.n	8000260 <Default_Handler>

Disassembly of section .text.Reset_Handler:

08000264 <Reset_Handler>:
 * 2. Initializes the uninitialized data section in SRAM to zero.
 * 3. Calls the main application function.
 * Note: You can add further initialization code here as needed.
 */
void Reset_Handler(void)
{
 8000264:	b500      	push	{lr}
 8000266:	b087      	sub	sp, #28
	//copy .data section to SRAM
	uint32_t size = (uint32_t)&_edata - (uint32_t)&_sdata;
 8000268:	4a1a      	ldr	r2, [pc, #104]	; (80002d4 <Reset_Handler+0x70>)
 800026a:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <Reset_Handler+0x74>)
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	9301      	str	r3, [sp, #4]
	
	uint8_t *pDst = (uint8_t*)&_sdata; //sram
 8000270:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <Reset_Handler+0x74>)
 8000272:	9305      	str	r3, [sp, #20]
	uint8_t *pSrc = (uint8_t*)&_la_data; //flash
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <Reset_Handler+0x78>)
 8000276:	9304      	str	r3, [sp, #16]
	
	for(uint32_t i =0 ; i < size ; i++)
 8000278:	2300      	movs	r3, #0
 800027a:	9303      	str	r3, [sp, #12]
 800027c:	e00a      	b.n	8000294 <Reset_Handler+0x30>
	{
		*pDst++ = *pSrc++;
 800027e:	9a04      	ldr	r2, [sp, #16]
 8000280:	1c53      	adds	r3, r2, #1
 8000282:	9304      	str	r3, [sp, #16]
 8000284:	9b05      	ldr	r3, [sp, #20]
 8000286:	1c59      	adds	r1, r3, #1
 8000288:	9105      	str	r1, [sp, #20]
 800028a:	7812      	ldrb	r2, [r2, #0]
 800028c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i =0 ; i < size ; i++)
 800028e:	9b03      	ldr	r3, [sp, #12]
 8000290:	3301      	adds	r3, #1
 8000292:	9303      	str	r3, [sp, #12]
 8000294:	9a03      	ldr	r2, [sp, #12]
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	429a      	cmp	r2, r3
 800029a:	d3f0      	bcc.n	800027e <Reset_Handler+0x1a>
	}
	
	//Init. the .bss section to zero in SRAM
	size = (uint32_t)&_ebss - (uint32_t)&_sbss;
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <Reset_Handler+0x7c>)
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <Reset_Handler+0x80>)
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	9301      	str	r3, [sp, #4]
	pDst = (uint8_t*)&_sbss;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <Reset_Handler+0x80>)
 80002a6:	9305      	str	r3, [sp, #20]
	for(uint32_t i =0 ; i < size ; i++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	9302      	str	r3, [sp, #8]
 80002ac:	e007      	b.n	80002be <Reset_Handler+0x5a>
	{
		*pDst++ = 0;
 80002ae:	9b05      	ldr	r3, [sp, #20]
 80002b0:	1c5a      	adds	r2, r3, #1
 80002b2:	9205      	str	r2, [sp, #20]
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
	for(uint32_t i =0 ; i < size ; i++)
 80002b8:	9b02      	ldr	r3, [sp, #8]
 80002ba:	3301      	adds	r3, #1
 80002bc:	9302      	str	r3, [sp, #8]
 80002be:	9a02      	ldr	r2, [sp, #8]
 80002c0:	9b01      	ldr	r3, [sp, #4]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d3f3      	bcc.n	80002ae <Reset_Handler+0x4a>
	}
	
	// Call the main application function
	main();
 80002c6:	f7ff ff39 	bl	800013c <main>
	
 80002ca:	bf00      	nop
 80002cc:	b007      	add	sp, #28
 80002ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80002d2:	bf00      	nop
 80002d4:	20000000 	.word	0x20000000
 80002d8:	20000000 	.word	0x20000000
 80002dc:	080002e8 	.word	0x080002e8
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000000 	.word	0x20000000
